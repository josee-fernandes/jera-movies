// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String?
  name       String
  avatar_url String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  Profile  Profile[]

  @@map("user")
}

model Account {
  id                  String   @id @default(cuid())
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  user_id             String   @unique

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("account")
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  expires       DateTime
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user_id       String   @unique

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("session")
}

model Profile {
  id         String   @id @default(uuid())
  name       String
  avatar_url String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id    String   @unique

  user         User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  ProfileMovie ProfileMovie[]

  @@map("profile")
}

model Movie {
  id            String  @id @default(uuid())
  name          String
  cover         String
  saved         Boolean
  watched       Boolean
  themoviedb_id String

  ProfileMovie ProfileMovie[]

  @@map("movie")
}

model ProfileMovie {
  profile_id String @unique
  movie_id   String @unique

  profile Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  movie   Movie   @relation(fields: [movie_id], references: [id], onDelete: Cascade)

  @@map("profile_movie")
}
